class Solution:
    def binarySearch(self, arr, low, high, key): 

        if high < low: 
            return -1
        mid = int((low + high)/2) 

        if key == arr[mid]: 
            return mid 
        if key > arr[mid]: 
            return self.binarySearch(arr, (mid + 1), high, key); 
        return self.binarySearch(arr, low, (mid -1), key); 
    

    def pivotedBinarySearch(self, arr, n, key): 
        pivot = self.findPivot(arr, 0, n-1); 
        if pivot == -1: 
            return self.binarySearch(arr, 0, n-1, key); 
        if arr[pivot] == key: 
            return pivot 
        if arr[0] <= key: 
            return self.binarySearch(arr, 0, pivot-1, key); 
        return self.binarySearch(arr, pivot+1, n-1, key); 

    def findPivot(self, arr, low, high): 
        if high < low: 
            return -1
        if high == low: 
            return low 
        mid = int((low + high)/2)
        if mid < high and arr[mid] > arr[mid + 1]: 
            return mid 
        if mid > low and arr[mid] < arr[mid - 1]: 
            return (mid-1) 
        if arr[low] >= arr[mid]: 
            return self.findPivot(arr, low, mid-1) 
        return self.findPivot(arr, mid + 1, high) 


    def search(self, nums: List[int], target: int) -> int:
    	return self.pivotedBinarySearch(nums, len(nums), target) 
		
