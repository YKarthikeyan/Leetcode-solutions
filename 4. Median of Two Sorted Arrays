class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        x = len(nums1)
        y = len(nums2)
        
        if (x>y):
            return self.findMedianSortedArrays(nums2, nums1)
        
        start = 0
        end   = x
        
        while start <= end:
            partitionX = start + ((end - start) // 2)
            partitionY = ( (x+y)//2 ) - partitionX
            
            maxLeftX = float("-inf") if (partitionX == 0) else nums1[partitionX-1]
            minRightX = float("inf") if (partitionX == x) else nums1[partitionX]

            maxLeftY = float("-inf") if (partitionY == 0) else nums2[partitionY-1]
            minRightY = float("inf") if (partitionY == y) else nums2[partitionY]
            
            if(maxLeftX <= minRightY and maxLeftY <= minRightX):
                if((x+y)%2 == 0):
                    return (max(maxLeftX, maxLeftY) + min(minRightX, minRightY))/2
                else:
                    return min(minRightX, minRightY)
            elif(maxLeftX > minRightY):
                end = partitionX - 1
            else:
                start = partitionX + 1
                
